1.- git config --global user.name "rodrigo villanueva"  (Ejemplo)
2.- git config --global user.email "rodrigodrupal1@gmail.com"  (Ejemplo)

3.-  git config --global -e   -> para saver  para salirse es :q + enter
 
4.- Inicar proyect estando en la carpeta del proyecto  -> git init

5.- git status   -> muestra todo 

6.- agregar todo  ->  git add .

7.-git commit -m  "Primer commit"   -> se hace el commit

8.- Recuperar hasta donde estas muy importante  ->  git checkout -- .

9.- git log  -> Muestra todos los commits

10.- Agregar de un solo tipo de archivo -> git add *.png

11.-Quitar de agregar con -> git reset *.xml    ejemplo

12.-git log --oneline  -> muestra todo en una linea

13.-git log --oneline --decorate --all --graph   -> muestra todo con ramas 

14.- git status -s   -> muestra lo que hay que subir mas corto

15.- git status -s -b  -> muestra corto y la rama en la que estamos

##### Crando alias ########

16.-git config --global alias.lg  "log --oneline --decorate --all --graph"  -> cuando pongamos lg se activa

17.- git config --global alias.s  "status -s -b"

18.- git config --global -l  -> Muestra todos los alias

19.- git config --global alias.alias  "config --global -l"


##  Creando alias######

#---------Restaurar ---------#

20.- git diff  -> muestra las diferencias de los archivos lo que hicimos

21.- git diff --staged  -> verifica los que estan en stage

22.-git reset HEAD (Nombre del archivo)

23.- git checkout -- (Nombre del archivo)


24.-  git commit -am "Actuliza cuatro "  ->  -am sube y hace el commit 

25.- git commit --amend -m "Cambio"  -> cambia el ultimo mensaje

26.- git reset --soft HEAD^  -> se agrega el cambio al ultimo commit


######VIAJE EN EL TIEMPO #########3

27.- git reset --soft acd24d9        Modificar un commit especifico

28.- git reset --hard  ee63fda    -> te mueve a un punto de la historia  MUY importante

29.- git  reflog   --> TIENE EL CONTROL DE TODOS LOS CAMBIOS EN EL REPO MUY IMPORTANTES


###### MODIFICAR Y BORRAR ARCHIVO DESDE GIT ###############

30.- git mv  (archivo)  (nuevo nombre)

31.- git rm (archivo)

32.- se se borra un archivo desde un Editor  se hace
git add -u y luego el proceso normal

33.- Al archivo gitignore sirve para que ignore a git

############ CREACION DE RAMAS #####################

34.-git branch  rama-villanos
para verla git branch

35.-git checkout rama-villanos -> me paso a esta rama

36.-Unir la rama villanos a la master 
git diff rama-villanos master   -> vemos las diferencias

37.- pasarte  a la rama master primero
git checkout master

-> git merge rama-villanos   -> con eso une la rama-villanos a master

->buena practica borrar la rama -> git branch -d rama-villanos

38.- git checkout -b rama-nueva  -> crea la rama y se mueve a ella

39.- entando en la rama master hacemos una unión automatica con
    git merge (rama a fucionar)  tenemos que modificar los cambios desde los archivos.


##########  CREANDO TAGS ##########

40.-git tag super

41.- git tag

42.- git tag -d super

43.-git tag -a v1.0.0 -m "Version 1.0.0"

44.-git tag -a v0.1.0 fc917a7 -m "Version 0.1.0 alpha"


############  STAGS  ####################

45.-git stash  -> hace unresplado hasta donde esta estable y puedes seguir
trabajando con calma

46.- git stash list  -> muestra todods los trabajos pendientes

47.- git stash pop -> recuperar los stash

48.-git stash drop -> borrar el stash en conflicto Nota->primero resolver el conflicto

49.- git stash apply stash@{1}  recupera un stash especifico

50.- git show stash ->Muestra informacion mas detallada

51.-git stash save "Nombre del stash "


########## RABASE EVITA ERRORES EN LOS COMITS LOS PONE ARRIBA PARA UNIR LAS DOS RAMAS ############3

52.-git checkout rama-misiones-completadas
Pasamos a la rama 
-> git rebase master    -> rebasa la rama maestra

->por ultimo unimos las ramas -> pasamos a la rama maestra git checkout master

-> git merge  rama-misones-completadas

-> Ya podemos borrar la rama.

-> git branch -d rama-misones-completadas


################ QUITAR UN COMMIT DE VARIOS ######################

53.- git checkout -- (el commit a quitar)

###############SUBIR A GITHUB TIENE EL CORREO ACTUAL Y LA CONTRASEÑA###########

54.-git remote add origin https://github.com/rvndrupal/web6.git  -> pasamos la direccion

55.- git remote o git remote -v

56.-git push -u origin master -> subir el origin de la rama master

57.- Subir los tags  -> git push --tags

58.- Bajamos cambios del repo -> git pull

59.- clonar un Repositorio -> git clone https://github.com/rvndrupal/web6.git (titulo que quieras)

60.-Subir a GITHUB  -> git push   -> despues de hacel el commit normal

#####################MUY IMPORTANTE ###################################
61.-Para saber como estan los cambios -> git fetch despues  decargar todo lo del repo
git pull   y despues subimos nuestros nuevos cambios   git push

#####################MUY IMPORTANTE ###################################


